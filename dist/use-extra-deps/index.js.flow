//@flow
// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

export type PrimitiveDep = boolean | string | number | null | void | Symbol;
export type CallbackFn<F> = F;
declare export var unCallbackFn: <F>(fn: F) => F;
declare export function unsafeMkCallbackFn<F: (v: any) => any>(
  f: F
): CallbackFn<F>;
export type ExtraDeps<V> =
  | {
      value: V,
      comparator: (a: V, b: V) => boolean,
      ...
    }
  | CallbackFn<V>;
declare export function useExtraDeps<
  T: $ObjMapi<
    S,
    <P>(
      P
    ) => $FlowGen$If<
      $FlowGen$Assignable<$ElementType<S, P>, ExtraDeps<R>>,
      R,
      empty
    >
  >,
  S: {
    [key: string]: ExtraDeps<mixed>,
    ...
  }
>(
  deps: $ReadOnlyArray<PrimitiveDep>,
  extraDeps: S
): {
  allDeps: $ReadOnlyArray<any>,
  extraDepValues: T,
  ...
};
