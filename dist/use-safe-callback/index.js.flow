/* @flow */

import * as React from "react";

import {
  type PrimitiveDep,
  type ExtraDeps,
  type CallbackFn,
  useExtraDeps,
  unsafeMkCallbackFn,
} from "./../use-extra-deps";

export function useSafeCallback<F: (...Array<any>) => any>(
  f: () => F,
  deps: $ReadOnlyArray<PrimitiveDep>
): CallbackFn<F> {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return useSafeCallbackExtraDeps(() => f(), deps, {});
}

export function useSafeCallbackExtraDeps<
  F: (...Array<any>) => any,
  S: { [key: string]: any }
>(
  f: ($ObjMap<S, <V>(ExtraDeps<V>) => V>) => F,
  deps: $ReadOnlyArray<PrimitiveDep>,
  extraDeps: S
): CallbackFn<F> {
  const { extraDepValues, allDeps } = useExtraDeps(deps, extraDeps);

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const cb = React.useCallback(f(extraDepValues), allDeps);

  //$FlowFixMe: Can't unify `F` with useCallback but we know that they are the same
  const cbF: F = cb;

  return unsafeMkCallbackFn(cbF);
}