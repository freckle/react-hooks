//@flow
// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

import type { MaybeCleanUpFn } from "./../types";
import { type, ExtraDeps, type, PrimitiveDep } from "./../use-extra-deps";
declare export var useSafeEffect: (
  effect: () => MaybeCleanUpFn,
  deps: $ReadOnlyArray<PrimitiveDep>
) => void;
declare export var useSafeEffectExtraDeps: <
  T: $ObjMapi<
    S,
    <P>(
      P
    ) => $FlowGen$If<
      $FlowGen$Assignable<$ElementType<S, P>, ExtraDeps<R>>,
      R,
      empty
    >
  >,
  S: {
    [key: string]: mixed,
    ...
  }
>(
  effect: (a: T) => MaybeCleanUpFn,
  deps: $ReadOnlyArray<PrimitiveDep>,
  extraDeps: S
) => void;
